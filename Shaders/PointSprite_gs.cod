//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerFrame
// {
//
//   row_major float4x4 View;           // Offset:    0 Size:    64
//   row_major float4x4 Projection;     // Offset:   64 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerFrame                        cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   x  w
// PARAM                    0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
//
gs_4_0
dcl_constantbuffer CB0[8], immediateIndexed
dcl_input v[1][0].xyz
dcl_input v[1][1].xyz
dcl_input v[1][2].xy
dcl_input v[1][3].xyzw
dcl_input v[1][4].xyzw
dcl_temps 6
dcl_inputprimitive point 
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_maxout 4
mul r0.xyzw, cb0[1].xyzw, v[0][0].yyyy
mad r0.xyzw, v[0][0].xxxx, cb0[0].xyzw, r0.xyzw
mad r0.xyzw, v[0][0].zzzz, cb0[2].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb0[3].xyzw
mul r1.xy, l(-1.000000, 1.000000, 0.000000, 0.000000), v[0][2].xyxx
mov r1.z, l(0)
add r2.xyzw, r0.xyzw, r1.xyzz
mul r3.xyzw, r2.yyyy, cb0[5].xyzw
mad r3.xyzw, r2.xxxx, cb0[4].xyzw, r3.xyzw
mad r3.xyzw, r2.zzzz, cb0[6].xyzw, r3.xyzw
mad r2.xyzw, r2.wwww, cb0[7].xyzw, r3.xyzw
mov o0.xyzw, r2.xyzw
ftou r1.y, v[0][3].x
and r2.x, r1.y, l(3)
ushr r1.y, r1.y, l(2)
utof r1.y, r1.y
utof r2.x, r2.x
mul r2.y, r2.x, l(0.250000)
mad r2.x, r2.x, l(0.250000), l(0.250000)
mov o1.x, r2.y
mul r2.z, r1.y, l(0.250000)
mad r1.y, r1.y, l(0.250000), l(0.250000)
mov o1.y, r2.z
mov o2.xyz, v[0][4].xyzx
mov o2.w, v[0][3].w
emit 
mov r3.xy, v[0][2].xyxx
mov r3.z, l(0)
add r4.xyzw, r0.xyzw, r3.xyzz
mul r5.xyzw, r4.yyyy, cb0[5].xyzw
mad r5.xyzw, r4.xxxx, cb0[4].xyzw, r5.xyzw
mad r5.xyzw, r4.zzzz, cb0[6].xyzw, r5.xyzw
mad r4.xyzw, r4.wwww, cb0[7].xyzw, r5.xyzw
mov o0.xyzw, r4.xyzw
mov o1.x, r2.x
mov o1.y, r2.z
mov o2.xyz, v[0][4].xyzx
mov o2.w, v[0][3].w
emit 
mov r1.w, -v[0][2].y
add r4.xyzw, r0.xyzw, r1.xwzz
mul r5.xyzw, r4.yyyy, cb0[5].xyzw
mad r5.xyzw, r4.xxxx, cb0[4].xyzw, r5.xyzw
mad r5.xyzw, r4.zzzz, cb0[6].xyzw, r5.xyzw
mad r4.xyzw, r4.wwww, cb0[7].xyzw, r5.xyzw
mov o0.xyzw, r4.xyzw
mov o1.x, r2.y
mov o1.y, r1.y
mov o2.xyz, v[0][4].xyzx
mov o2.w, v[0][3].w
emit 
mov r3.w, -v[0][2].y
add r0.xyzw, r0.xyzw, r3.xwzz
mul r3.xyzw, r0.yyyy, cb0[5].xyzw
mad r3.xyzw, r0.xxxx, cb0[4].xyzw, r3.xyzw
mad r3.xyzw, r0.zzzz, cb0[6].xyzw, r3.xyzw
mad r0.xyzw, r0.wwww, cb0[7].xyzw, r3.xyzw
mov o0.xyzw, r0.xyzw
mov o1.x, r2.x
mov o1.y, r1.y
mov o2.xyz, v[0][4].xyzx
mov o2.w, v[0][3].w
emit 
cut 
ret 
// Approximately 65 instruction slots used

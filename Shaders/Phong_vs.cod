//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerMesh
// {
//
//   row_major float4x4 matWVP;         // Offset:    0 Size:    64
//   row_major float4x4 World;          // Offset:   64 Size:    64
//   float4 materialColor;              // Offset:  128 Size:    16
//   float4 LightDir;                   // Offset:  144 Size:    16 [unused]
//   row_major float4x4 BoneTransforms[128];// Offset:  160 Size:  8192
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerMesh                         cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xy          4     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[522], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xy
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; v0.w <- input.Position.w; 
//   v1.x <- input.Normal.x; v1.y <- input.Normal.y; v1.z <- input.Normal.z; v1.w <- input.Normal.w; 
//   v2.x <- input.Tex.x; v2.y <- input.Tex.y; 
//   v3.x <- input.BoneWeights.x; v3.y <- input.BoneWeights.y; v3.z <- input.BoneWeights.z; v3.w <- input.BoneWeights.w; 
//   v4.x <- input.BoneIndices.x; v4.y <- input.BoneIndices.y; v4.z <- input.BoneIndices.z; v4.w <- input.BoneIndices.w; 
//   o4.x <- <main return value>.Tex.x; o4.y <- <main return value>.Tex.y; 
//   o3.x <- <main return value>.wPosition.x; o3.y <- <main return value>.wPosition.y; o3.z <- <main return value>.wPosition.z; 
//   o2.x <- <main return value>.wNormal.x; o2.y <- <main return value>.wNormal.y; o2.z <- <main return value>.wNormal.z; 
//   o1.x <- <main return value>.Color.x; o1.y <- <main return value>.Color.y; o1.z <- <main return value>.Color.z; o1.w <- <main return value>.Color.w; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 21 "D:\個人製作\Shaders\Phong_vs.hlsl"
mov r0.xyz, l(0,0,0,0)  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z

#line 22
mov r1.xyz, l(0,0,0,0)  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z

#line 25
mov r0.w, l(0)  // r0.w <- i
mov r2.xyz, r0.xyzx  // r2.x <- p.x; r2.y <- p.y; r2.z <- p.z
mov r3.xyz, r1.xyzx  // r3.x <- n.x; r3.y <- n.y; r3.z <- n.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.w, r1.w, l(4)
  breakc_z r2.w

#line 27
  dp4 r2.w, v3.xyzw, icb[r1.w + 0].xyzw
  and r4.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r4.xy, r4.ywyy, r4.xzxx
  or r4.x, r4.y, r4.x
  imul null, r4.x, r4.x, l(4)
  mul r4.yzw, v0.xxxx, cb0[r4.x + 10].xxyz
  mul r5.xyz, v0.yyyy, cb0[r4.x + 11].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, v0.zzzz, cb0[r4.x + 12].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, v0.wwww, cb0[r4.x + 13].xyzx
  add r4.xyz, r4.yzwy, r5.xyzx
  mul r4.xyz, r2.wwww, r4.xyzx
  add r2.xyz, r2.xyzx, r4.xyzx

#line 28
  dp4 r2.w, v3.xyzw, icb[r1.w + 0].xyzw
  itof r4.x, l(0)
  and r5.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r4.yz, r5.yywy, r5.xxzx
  or r4.y, r4.z, r4.y
  imul null, r4.y, r4.y, l(4)
  mul r5.xyz, v1.xxxx, cb0[r4.y + 10].xyzx
  mul r6.xyz, v1.yyyy, cb0[r4.y + 11].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r6.xyz, v1.zzzz, cb0[r4.y + 12].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r4.xyz, r4.xxxx, cb0[r4.y + 13].xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  mul r4.xyz, r2.wwww, r4.xyzx
  add r3.xyz, r3.xyzx, r4.xyzx

#line 29
  iadd r1.w, r1.w, l(1)
endloop 

#line 31
mov r2.xyz, r2.xyzx  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z
mov r0.x, l(1.000000)  // r0.x <- P.w

#line 32
mov r3.w, l(0)
mov r3.xyzw, r3.xyzw  // r3.x <- N.x; r3.y <- N.y; r3.z <- N.z; r3.w <- N.w

#line 35
mul r1.xyzw, r2.xxxx, cb0[0].xyzw
mul r4.xyzw, r2.yyyy, cb0[1].xyzw
add r1.xyzw, r1.xyzw, r4.xyzw
mul r4.xyzw, r2.zzzz, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r4.xyzw
mul r4.xyzw, r0.xxxx, cb0[3].xyzw
add r1.xyzw, r1.xyzw, r4.xyzw  // r1.x <- output.Position.x; r1.y <- output.Position.y; r1.z <- output.Position.z; r1.w <- output.Position.w

#line 37
mul r0.yzw, r2.xxxx, cb0[4].xxyz
mul r2.xyw, r2.yyyy, cb0[5].xyxz
add r0.yzw, r0.yyzw, r2.xxyw
mul r2.xyz, r2.zzzz, cb0[6].xyzx
add r0.yzw, r0.yyzw, r2.xxyz
mul r2.xyz, r0.xxxx, cb0[7].xyzx
add r0.xyz, r0.yzwy, r2.xyzx  // r0.x <- wPos.x; r0.y <- wPos.y; r0.z <- wPos.z

#line 38
mov r0.xyz, r0.xyzx  // r0.x <- output.wPosition.x; r0.y <- output.wPosition.y; r0.z <- output.wPosition.z

#line 39
mul r2.xyz, r3.xxxx, cb0[4].xyzx
mul r4.xyz, r3.yyyy, cb0[5].xyzx
add r2.xyz, r2.xyzx, r4.xyzx
mul r3.xyz, r3.zzzz, cb0[6].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.xyz, r3.wwww, cb0[7].xyzx
add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- wN.x; r2.y <- wN.y; r2.z <- wN.z

#line 40
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx

#line 41
mov r2.xyz, r2.xyzx  // r2.x <- output.wNormal.x; r2.y <- output.wNormal.y; r2.z <- output.wNormal.z

#line 47
mov r3.xyzw, cb0[8].xyzw  // r3.x <- output.Color.x; r3.y <- output.Color.y; r3.z <- output.Color.z; r3.w <- output.Color.w

#line 49
mov r4.xy, v2.xyxx  // r4.x <- output.Tex.x; r4.y <- output.Tex.y

#line 51
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r3.xyzw
mov o2.xyz, r2.xyzx
mov o3.xyz, r0.xyzx
mov o4.xy, r4.xyxx
ret 
// Approximately 78 instruction slots used

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerMesh
// {
//
//   row_major float4x4 matWVP;         // Offset:    0 Size:    64
//   row_major float4x4 World;          // Offset:   64 Size:    64
//   float4 materialColor;              // Offset:  128 Size:    16
//   float4 LightDir;                   // Offset:  144 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerMesh                         cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xy          4     NONE   float   xy  
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xyz         7     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[9], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xy
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; 
//   v1.x <- input.Normal.x; v1.y <- input.Normal.y; v1.z <- input.Normal.z; 
//   v2.x <- input.Tex.x; v2.y <- input.Tex.y; 
//   o7.x <- <main return value>.VZ.x; o7.y <- <main return value>.VZ.y; o7.z <- <main return value>.VZ.z; 
//   o6.x <- <main return value>.VY.x; o6.y <- <main return value>.VY.y; o6.z <- <main return value>.VY.z; 
//   o5.x <- <main return value>.VX.x; o5.y <- <main return value>.VX.y; o5.z <- <main return value>.VX.z; 
//   o4.x <- <main return value>.Tex.x; o4.y <- <main return value>.Tex.y; 
//   o3.x <- <main return value>.wPosition.x; o3.y <- <main return value>.wPosition.y; o3.z <- <main return value>.wPosition.z; 
//   o2.x <- <main return value>.wNormal.x; o2.y <- <main return value>.wNormal.y; o2.z <- <main return value>.wNormal.z; 
//   o1.x <- <main return value>.Color.x; o1.y <- <main return value>.Color.y; o1.z <- <main return value>.Color.z; o1.w <- <main return value>.Color.w; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 21 "D:\個人製作_0427 - test\Shaders\BumpShader_vs.hlsl"
mov r0.xyz, v0.xyzx  // r0.x <- P.x; r0.y <- P.y; r0.z <- P.z
mov r0.w, l(1.000000)  // r0.w <- P.w

#line 23
mul r1.xyzw, r0.xxxx, cb0[0].xyzw
mul r2.xyzw, r0.yyyy, cb0[1].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.zzzz, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.wwww, cb0[3].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- output.Position.x; r1.y <- output.Position.y; r1.z <- output.Position.z; r1.w <- output.Position.w

#line 25
mul r2.xyz, r0.xxxx, cb0[4].xyzx
mul r3.xyz, r0.yyyy, cb0[5].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r0.xyz, r0.zzzz, cb0[6].xyzx
add r0.xyz, r0.xyzx, r2.xyzx
mul r2.xyz, r0.wwww, cb0[7].xyzx
add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- wPos.x; r0.y <- wPos.y; r0.z <- wPos.z

#line 26
mov r0.xyz, r0.xyzx  // r0.x <- output.wPosition.x; r0.y <- output.wPosition.y; r0.z <- output.wPosition.z

#line 27
dp3 r2.x, cb0[4].xyzx, v1.xyzx  // r2.x <- wN.x
dp3 r2.y, cb0[5].xyzx, v1.xyzx  // r2.y <- wN.y
dp3 r2.z, cb0[6].xyzx, v1.xyzx  // r2.z <- wN.z

#line 28
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx

#line 29
mov r2.xyz, r2.xyzx  // r2.x <- output.wNormal.x; r2.y <- output.wNormal.y; r2.z <- output.wNormal.z

#line 32
mov r2.xyz, r2.xyzx  // r2.x <- VZ.x; r2.y <- VZ.y; r2.z <- VZ.z

#line 33
itof r3.xy, l(0, 1, 0, 0)  // r3.x <- VY.x; r3.y <- VY.y
mov r3.z, l(0.001000)  // r3.z <- VY.z

#line 35
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx

#line 36
mul r4.xyz, r2.yzxy, r3.zxyz
mul r5.xyz, r2.zxyz, r3.yzxy
mov r5.xyz, -r5.xyzx
add r4.xyz, r4.xyzx, r5.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- VX.x; r4.y <- VX.y; r4.z <- VX.z

#line 38
mov r4.xyz, r4.xyzx  // r4.x <- output.VX.x; r4.y <- output.VX.y; r4.z <- output.VX.z

#line 39
mov r3.xyz, r3.xyzx  // r3.x <- output.VY.x; r3.y <- output.VY.y; r3.z <- output.VY.z

#line 40
mov r2.xyz, r2.xyzx  // r2.x <- output.VZ.x; r2.y <- output.VZ.y; r2.z <- output.VZ.z

#line 47
mov r5.xyzw, cb0[8].xyzw  // r5.x <- output.Color.x; r5.y <- output.Color.y; r5.z <- output.Color.z; r5.w <- output.Color.w

#line 49
mov r6.xy, v2.xyxx  // r6.x <- output.Tex.x; r6.y <- output.Tex.y

#line 51
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r5.xyzw
mov o2.xyz, r2.xyzx
mov o3.xyz, r0.xyzx
mov o5.xyz, r4.xyzx
mov o6.xyz, r3.xyzx
mov o7.xyz, r2.xyzx
mov o4.xy, r6.xyxx
ret 
// Approximately 51 instruction slots used
